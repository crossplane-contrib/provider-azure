/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuthorizationRuleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AuthorizationRuleParameters struct {

	// +crossplane:generate:reference:type=EventHub
	// +kubebuilder:validation:Optional
	EventHubName *string `json:"eventhubName,omitempty" tf:"eventhub_name,omitempty"`

	// +kubebuilder:validation:Optional
	EventHubNameRef *v1.Reference `json:"eventHubNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	EventHubNameSelector *v1.Selector `json:"eventHubNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Listen *bool `json:"listen,omitempty" tf:"listen,omitempty"`

	// +kubebuilder:validation:Optional
	Manage *bool `json:"manage,omitempty" tf:"manage,omitempty"`

	// +crossplane:generate:reference:type=EventHubNamespace
	// +kubebuilder:validation:Optional
	NamespaceName *string `json:"namespaceName,omitempty" tf:"namespace_name,omitempty"`

	// +kubebuilder:validation:Optional
	NamespaceNameRef *v1.Reference `json:"namespaceNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	NamespaceNameSelector *v1.Selector `json:"namespaceNameSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Send *bool `json:"send,omitempty" tf:"send,omitempty"`
}

// AuthorizationRuleSpec defines the desired state of AuthorizationRule
type AuthorizationRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AuthorizationRuleParameters `json:"forProvider"`
}

// AuthorizationRuleStatus defines the observed state of AuthorizationRule.
type AuthorizationRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AuthorizationRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AuthorizationRule is the Schema for the AuthorizationRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type AuthorizationRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AuthorizationRuleSpec   `json:"spec"`
	Status            AuthorizationRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AuthorizationRuleList contains a list of AuthorizationRules
type AuthorizationRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AuthorizationRule `json:"items"`
}

// Repository type metadata.
var (
	AuthorizationRule_Kind             = "AuthorizationRule"
	AuthorizationRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AuthorizationRule_Kind}.String()
	AuthorizationRule_KindAPIVersion   = AuthorizationRule_Kind + "." + CRDGroupVersion.String()
	AuthorizationRule_GroupVersionKind = CRDGroupVersion.WithKind(AuthorizationRule_Kind)
)

func init() {
	SchemeBuilder.Register(&AuthorizationRule{}, &AuthorizationRuleList{})
}
