/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ManagedStorageAccountSASTokenDefinitionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	SecretID *string `json:"secretId,omitempty" tf:"secret_id,omitempty"`
}

type ManagedStorageAccountSASTokenDefinitionParameters struct {

	// +crossplane:generate:reference:type=ManagedStorageAccount
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-jet-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ManagedStorageAccountID *string `json:"managedStorageAccountId,omitempty" tf:"managed_storage_account_id,omitempty"`

	// +kubebuilder:validation:Optional
	ManagedStorageAccountIDRef *v1.Reference `json:"managedStorageAccountIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ManagedStorageAccountIDSelector *v1.Selector `json:"managedStorageAccountIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	SASTemplateURI *string `json:"sasTemplateUri" tf:"sas_template_uri,omitempty"`

	// +kubebuilder:validation:Required
	SASType *string `json:"sasType" tf:"sas_type,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	ValidityPeriod *string `json:"validityPeriod" tf:"validity_period,omitempty"`
}

// ManagedStorageAccountSASTokenDefinitionSpec defines the desired state of ManagedStorageAccountSASTokenDefinition
type ManagedStorageAccountSASTokenDefinitionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagedStorageAccountSASTokenDefinitionParameters `json:"forProvider"`
}

// ManagedStorageAccountSASTokenDefinitionStatus defines the observed state of ManagedStorageAccountSASTokenDefinition.
type ManagedStorageAccountSASTokenDefinitionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagedStorageAccountSASTokenDefinitionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagedStorageAccountSASTokenDefinition is the Schema for the ManagedStorageAccountSASTokenDefinitions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ManagedStorageAccountSASTokenDefinition struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagedStorageAccountSASTokenDefinitionSpec   `json:"spec"`
	Status            ManagedStorageAccountSASTokenDefinitionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagedStorageAccountSASTokenDefinitionList contains a list of ManagedStorageAccountSASTokenDefinitions
type ManagedStorageAccountSASTokenDefinitionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagedStorageAccountSASTokenDefinition `json:"items"`
}

// Repository type metadata.
var (
	ManagedStorageAccountSASTokenDefinition_Kind             = "ManagedStorageAccountSASTokenDefinition"
	ManagedStorageAccountSASTokenDefinition_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagedStorageAccountSASTokenDefinition_Kind}.String()
	ManagedStorageAccountSASTokenDefinition_KindAPIVersion   = ManagedStorageAccountSASTokenDefinition_Kind + "." + CRDGroupVersion.String()
	ManagedStorageAccountSASTokenDefinition_GroupVersionKind = CRDGroupVersion.WithKind(ManagedStorageAccountSASTokenDefinition_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagedStorageAccountSASTokenDefinition{}, &ManagedStorageAccountSASTokenDefinitionList{})
}
