/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ManagedHardwareSecurityModuleObservation struct {
	HSMURI *string `json:"hsmUri,omitempty" tf:"hsm_uri,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ManagedHardwareSecurityModuleParameters struct {

	// +kubebuilder:validation:Required
	AdminObjectIds []*string `json:"adminObjectIds" tf:"admin_object_ids,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Optional
	PurgeProtectionEnabled *bool `json:"purgeProtectionEnabled,omitempty" tf:"purge_protection_enabled,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	SkuName *string `json:"skuName" tf:"sku_name,omitempty"`

	// +kubebuilder:validation:Optional
	SoftDeleteRetentionDays *float64 `json:"softDeleteRetentionDays,omitempty" tf:"soft_delete_retention_days,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	TenantID *string `json:"tenantId" tf:"tenant_id,omitempty"`
}

// ManagedHardwareSecurityModuleSpec defines the desired state of ManagedHardwareSecurityModule
type ManagedHardwareSecurityModuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagedHardwareSecurityModuleParameters `json:"forProvider"`
}

// ManagedHardwareSecurityModuleStatus defines the observed state of ManagedHardwareSecurityModule.
type ManagedHardwareSecurityModuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagedHardwareSecurityModuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagedHardwareSecurityModule is the Schema for the ManagedHardwareSecurityModules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ManagedHardwareSecurityModule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagedHardwareSecurityModuleSpec   `json:"spec"`
	Status            ManagedHardwareSecurityModuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagedHardwareSecurityModuleList contains a list of ManagedHardwareSecurityModules
type ManagedHardwareSecurityModuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagedHardwareSecurityModule `json:"items"`
}

// Repository type metadata.
var (
	ManagedHardwareSecurityModule_Kind             = "ManagedHardwareSecurityModule"
	ManagedHardwareSecurityModule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagedHardwareSecurityModule_Kind}.String()
	ManagedHardwareSecurityModule_KindAPIVersion   = ManagedHardwareSecurityModule_Kind + "." + CRDGroupVersion.String()
	ManagedHardwareSecurityModule_GroupVersionKind = CRDGroupVersion.WithKind(ManagedHardwareSecurityModule_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagedHardwareSecurityModule{}, &ManagedHardwareSecurityModuleList{})
}
