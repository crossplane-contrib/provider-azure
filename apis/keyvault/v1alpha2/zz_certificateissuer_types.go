/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AdminObservation struct {
}

type AdminParameters struct {

	// +kubebuilder:validation:Required
	EmailAddress *string `json:"emailAddress" tf:"email_address,omitempty"`

	// +kubebuilder:validation:Optional
	FirstName *string `json:"firstName,omitempty" tf:"first_name,omitempty"`

	// +kubebuilder:validation:Optional
	LastName *string `json:"lastName,omitempty" tf:"last_name,omitempty"`

	// +kubebuilder:validation:Optional
	Phone *string `json:"phone,omitempty" tf:"phone,omitempty"`
}

type CertificateIssuerObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CertificateIssuerParameters struct {

	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// +kubebuilder:validation:Optional
	Admin []AdminParameters `json:"admin,omitempty" tf:"admin,omitempty"`

	// +crossplane:generate:reference:type=Vault
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-jet-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	KeyVaultID *string `json:"keyVaultId,omitempty" tf:"key_vault_id,omitempty"`

	// +kubebuilder:validation:Optional
	KeyVaultIDRef *v1.Reference `json:"keyVaultIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	KeyVaultIDSelector *v1.Selector `json:"keyVaultIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	ProviderName *string `json:"providerName" tf:"provider_name,omitempty"`
}

// CertificateIssuerSpec defines the desired state of CertificateIssuer
type CertificateIssuerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CertificateIssuerParameters `json:"forProvider"`
}

// CertificateIssuerStatus defines the observed state of CertificateIssuer.
type CertificateIssuerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CertificateIssuerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CertificateIssuer is the Schema for the CertificateIssuers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type CertificateIssuer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CertificateIssuerSpec   `json:"spec"`
	Status            CertificateIssuerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CertificateIssuerList contains a list of CertificateIssuers
type CertificateIssuerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CertificateIssuer `json:"items"`
}

// Repository type metadata.
var (
	CertificateIssuer_Kind             = "CertificateIssuer"
	CertificateIssuer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CertificateIssuer_Kind}.String()
	CertificateIssuer_KindAPIVersion   = CertificateIssuer_Kind + "." + CRDGroupVersion.String()
	CertificateIssuer_GroupVersionKind = CRDGroupVersion.WithKind(CertificateIssuer_Kind)
)

func init() {
	SchemeBuilder.Register(&CertificateIssuer{}, &CertificateIssuerList{})
}
