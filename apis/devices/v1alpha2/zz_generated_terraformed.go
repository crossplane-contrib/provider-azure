/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha2

import (
	"github.com/pkg/errors"

	"github.com/crossplane/terrajet/pkg/resource"
	"github.com/crossplane/terrajet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this IOTHub
func (mg *IOTHub) GetTerraformResourceType() string {
	return "azurerm_iothub"
}

// GetConnectionDetailsMapping for this IOTHub
func (tr *IOTHub) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"endpoint[*].connection_string": "spec.forProvider.endpoint[*].connectionStringSecretRef", "file_upload[*].connection_string": "spec.forProvider.fileUpload[*].connectionStringSecretRef", "shared_access_policy[*].primary_key": "status.atProvider.sharedAccessPolicy[*].primaryKey", "shared_access_policy[*].secondary_key": "status.atProvider.sharedAccessPolicy[*].secondaryKey"}
}

// GetObservation of this IOTHub
func (tr *IOTHub) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this IOTHub
func (tr *IOTHub) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this IOTHub
func (tr *IOTHub) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this IOTHub
func (tr *IOTHub) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this IOTHub
func (tr *IOTHub) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this IOTHub using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *IOTHub) LateInitialize(attrs []byte) (bool, error) {
	params := &IOTHubParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *IOTHub) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this IOTHubConsumerGroup
func (mg *IOTHubConsumerGroup) GetTerraformResourceType() string {
	return "azurerm_iothub_consumer_group"
}

// GetConnectionDetailsMapping for this IOTHubConsumerGroup
func (tr *IOTHubConsumerGroup) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this IOTHubConsumerGroup
func (tr *IOTHubConsumerGroup) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this IOTHubConsumerGroup
func (tr *IOTHubConsumerGroup) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this IOTHubConsumerGroup
func (tr *IOTHubConsumerGroup) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this IOTHubConsumerGroup
func (tr *IOTHubConsumerGroup) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this IOTHubConsumerGroup
func (tr *IOTHubConsumerGroup) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this IOTHubConsumerGroup using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *IOTHubConsumerGroup) LateInitialize(attrs []byte) (bool, error) {
	params := &IOTHubConsumerGroupParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *IOTHubConsumerGroup) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this IOTHubDPS
func (mg *IOTHubDPS) GetTerraformResourceType() string {
	return "azurerm_iothub_dps"
}

// GetConnectionDetailsMapping for this IOTHubDPS
func (tr *IOTHubDPS) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"linked_hub[*].connection_string": "spec.forProvider.linkedHub[*].connectionStringSecretRef"}
}

// GetObservation of this IOTHubDPS
func (tr *IOTHubDPS) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this IOTHubDPS
func (tr *IOTHubDPS) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this IOTHubDPS
func (tr *IOTHubDPS) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this IOTHubDPS
func (tr *IOTHubDPS) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this IOTHubDPS
func (tr *IOTHubDPS) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this IOTHubDPS using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *IOTHubDPS) LateInitialize(attrs []byte) (bool, error) {
	params := &IOTHubDPSParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *IOTHubDPS) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this IOTHubDPSCertificate
func (mg *IOTHubDPSCertificate) GetTerraformResourceType() string {
	return "azurerm_iothub_dps_certificate"
}

// GetConnectionDetailsMapping for this IOTHubDPSCertificate
func (tr *IOTHubDPSCertificate) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"certificate_content": "spec.forProvider.certificateContentSecretRef"}
}

// GetObservation of this IOTHubDPSCertificate
func (tr *IOTHubDPSCertificate) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this IOTHubDPSCertificate
func (tr *IOTHubDPSCertificate) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this IOTHubDPSCertificate
func (tr *IOTHubDPSCertificate) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this IOTHubDPSCertificate
func (tr *IOTHubDPSCertificate) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this IOTHubDPSCertificate
func (tr *IOTHubDPSCertificate) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this IOTHubDPSCertificate using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *IOTHubDPSCertificate) LateInitialize(attrs []byte) (bool, error) {
	params := &IOTHubDPSCertificateParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *IOTHubDPSCertificate) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this IOTHubDPSSharedAccessPolicy
func (mg *IOTHubDPSSharedAccessPolicy) GetTerraformResourceType() string {
	return "azurerm_iothub_dps_shared_access_policy"
}

// GetConnectionDetailsMapping for this IOTHubDPSSharedAccessPolicy
func (tr *IOTHubDPSSharedAccessPolicy) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"primary_connection_string": "status.atProvider.primaryConnectionString", "primary_key": "status.atProvider.primaryKey", "secondary_connection_string": "status.atProvider.secondaryConnectionString", "secondary_key": "status.atProvider.secondaryKey"}
}

// GetObservation of this IOTHubDPSSharedAccessPolicy
func (tr *IOTHubDPSSharedAccessPolicy) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this IOTHubDPSSharedAccessPolicy
func (tr *IOTHubDPSSharedAccessPolicy) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this IOTHubDPSSharedAccessPolicy
func (tr *IOTHubDPSSharedAccessPolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this IOTHubDPSSharedAccessPolicy
func (tr *IOTHubDPSSharedAccessPolicy) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this IOTHubDPSSharedAccessPolicy
func (tr *IOTHubDPSSharedAccessPolicy) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this IOTHubDPSSharedAccessPolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *IOTHubDPSSharedAccessPolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &IOTHubDPSSharedAccessPolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *IOTHubDPSSharedAccessPolicy) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this IOTHubEndpointStorageContainer
func (mg *IOTHubEndpointStorageContainer) GetTerraformResourceType() string {
	return "azurerm_iothub_endpoint_storage_container"
}

// GetConnectionDetailsMapping for this IOTHubEndpointStorageContainer
func (tr *IOTHubEndpointStorageContainer) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"connection_string": "spec.forProvider.connectionStringSecretRef"}
}

// GetObservation of this IOTHubEndpointStorageContainer
func (tr *IOTHubEndpointStorageContainer) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this IOTHubEndpointStorageContainer
func (tr *IOTHubEndpointStorageContainer) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this IOTHubEndpointStorageContainer
func (tr *IOTHubEndpointStorageContainer) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this IOTHubEndpointStorageContainer
func (tr *IOTHubEndpointStorageContainer) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this IOTHubEndpointStorageContainer
func (tr *IOTHubEndpointStorageContainer) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this IOTHubEndpointStorageContainer using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *IOTHubEndpointStorageContainer) LateInitialize(attrs []byte) (bool, error) {
	params := &IOTHubEndpointStorageContainerParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *IOTHubEndpointStorageContainer) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this IOTHubFallbackRoute
func (mg *IOTHubFallbackRoute) GetTerraformResourceType() string {
	return "azurerm_iothub_fallback_route"
}

// GetConnectionDetailsMapping for this IOTHubFallbackRoute
func (tr *IOTHubFallbackRoute) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this IOTHubFallbackRoute
func (tr *IOTHubFallbackRoute) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this IOTHubFallbackRoute
func (tr *IOTHubFallbackRoute) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this IOTHubFallbackRoute
func (tr *IOTHubFallbackRoute) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this IOTHubFallbackRoute
func (tr *IOTHubFallbackRoute) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this IOTHubFallbackRoute
func (tr *IOTHubFallbackRoute) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this IOTHubFallbackRoute using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *IOTHubFallbackRoute) LateInitialize(attrs []byte) (bool, error) {
	params := &IOTHubFallbackRouteParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *IOTHubFallbackRoute) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this IOTHubSharedAccessPolicy
func (mg *IOTHubSharedAccessPolicy) GetTerraformResourceType() string {
	return "azurerm_iothub_shared_access_policy"
}

// GetConnectionDetailsMapping for this IOTHubSharedAccessPolicy
func (tr *IOTHubSharedAccessPolicy) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"primary_connection_string": "status.atProvider.primaryConnectionString", "primary_key": "status.atProvider.primaryKey", "secondary_connection_string": "status.atProvider.secondaryConnectionString", "secondary_key": "status.atProvider.secondaryKey"}
}

// GetObservation of this IOTHubSharedAccessPolicy
func (tr *IOTHubSharedAccessPolicy) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this IOTHubSharedAccessPolicy
func (tr *IOTHubSharedAccessPolicy) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this IOTHubSharedAccessPolicy
func (tr *IOTHubSharedAccessPolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this IOTHubSharedAccessPolicy
func (tr *IOTHubSharedAccessPolicy) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this IOTHubSharedAccessPolicy
func (tr *IOTHubSharedAccessPolicy) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this IOTHubSharedAccessPolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *IOTHubSharedAccessPolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &IOTHubSharedAccessPolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *IOTHubSharedAccessPolicy) GetTerraformSchemaVersion() int {
	return 0
}
