/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IOTHubDPSCertificateObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type IOTHubDPSCertificateParameters struct {

	// +kubebuilder:validation:Required
	CertificateContentSecretRef v1.SecretKeySelector `json:"certificateContentSecretRef" tf:"-"`

	// +crossplane:generate:reference:type=IOTHubDPS
	// +kubebuilder:validation:Optional
	IOTDPSName *string `json:"iotDpsName,omitempty" tf:"iot_dps_name,omitempty"`

	// +kubebuilder:validation:Optional
	IOTDPSNameRef *v1.Reference `json:"iotdpsNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	IOTDPSNameSelector *v1.Selector `json:"iotdpsNameSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`
}

// IOTHubDPSCertificateSpec defines the desired state of IOTHubDPSCertificate
type IOTHubDPSCertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IOTHubDPSCertificateParameters `json:"forProvider"`
}

// IOTHubDPSCertificateStatus defines the observed state of IOTHubDPSCertificate.
type IOTHubDPSCertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IOTHubDPSCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IOTHubDPSCertificate is the Schema for the IOTHubDPSCertificates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type IOTHubDPSCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IOTHubDPSCertificateSpec   `json:"spec"`
	Status            IOTHubDPSCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IOTHubDPSCertificateList contains a list of IOTHubDPSCertificates
type IOTHubDPSCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IOTHubDPSCertificate `json:"items"`
}

// Repository type metadata.
var (
	IOTHubDPSCertificate_Kind             = "IOTHubDPSCertificate"
	IOTHubDPSCertificate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IOTHubDPSCertificate_Kind}.String()
	IOTHubDPSCertificate_KindAPIVersion   = IOTHubDPSCertificate_Kind + "." + CRDGroupVersion.String()
	IOTHubDPSCertificate_GroupVersionKind = CRDGroupVersion.WithKind(IOTHubDPSCertificate_Kind)
)

func init() {
	SchemeBuilder.Register(&IOTHubDPSCertificate{}, &IOTHubDPSCertificateList{})
}
