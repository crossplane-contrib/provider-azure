/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VirtualWANObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type VirtualWANParameters struct {

	// +kubebuilder:validation:Optional
	AllowBranchToBranchTraffic *bool `json:"allowBranchToBranchTraffic,omitempty" tf:"allow_branch_to_branch_traffic,omitempty"`

	// +kubebuilder:validation:Optional
	AllowVnetToVnetTraffic *bool `json:"allowVnetToVnetTraffic,omitempty" tf:"allow_vnet_to_vnet_traffic,omitempty"`

	// +kubebuilder:validation:Optional
	DisableVPNEncryption *bool `json:"disableVpnEncryption,omitempty" tf:"disable_vpn_encryption,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Optional
	Office365LocalBreakoutCategory *string `json:"office365LocalBreakoutCategory,omitempty" tf:"office365_local_breakout_category,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// VirtualWANSpec defines the desired state of VirtualWAN
type VirtualWANSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VirtualWANParameters `json:"forProvider"`
}

// VirtualWANStatus defines the observed state of VirtualWAN.
type VirtualWANStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VirtualWANObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualWAN is the Schema for the VirtualWANs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type VirtualWAN struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualWANSpec   `json:"spec"`
	Status            VirtualWANStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualWANList contains a list of VirtualWANs
type VirtualWANList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualWAN `json:"items"`
}

// Repository type metadata.
var (
	VirtualWAN_Kind             = "VirtualWAN"
	VirtualWAN_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VirtualWAN_Kind}.String()
	VirtualWAN_KindAPIVersion   = VirtualWAN_Kind + "." + CRDGroupVersion.String()
	VirtualWAN_GroupVersionKind = CRDGroupVersion.WithKind(VirtualWAN_Kind)
)

func init() {
	SchemeBuilder.Register(&VirtualWAN{}, &VirtualWANList{})
}
