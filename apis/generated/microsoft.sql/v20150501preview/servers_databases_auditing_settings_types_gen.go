// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// Code generated by k8s-infra-gen. DO NOT EDIT.
package v20150501preview

import (
	"github.com/crossplane/crossplane-runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type ServersDatabasesAuditingSettings struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServersDatabasesAuditingSettings_Spec `json:"spec,omitempty"`
	Status            DatabaseBlobAuditingPolicy_Status     `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
type ServersDatabasesAuditingSettingsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServersDatabasesAuditingSettings `json:"items"`
}

type DatabaseBlobAuditingPolicy_Status struct {
	v1alpha1.ResourceStatus `json:",inline"`
	AtProvider              ServersDatabasesAuditingSettingsObservation `json:"atProvider"`
}

type ServersDatabasesAuditingSettings_Spec struct {
	v1alpha1.ResourceSpec `json:",inline"`
	ForProvider           ServersDatabasesAuditingSettingsParameters `json:"forProvider"`
}

type ServersDatabasesAuditingSettingsObservation struct {

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Kind: Resource kind.
	Kind *string `json:"kind,omitempty"`

	//Name: Resource name.
	Name *string `json:"name,omitempty"`

	//Properties: Resource properties.
	Properties *DatabaseBlobAuditingPolicyProperties_Status `json:"properties,omitempty"`

	//Type: Resource type.
	Type *string `json:"type,omitempty"`
}

type ServersDatabasesAuditingSettingsParameters struct {

	// +kubebuilder:validation:Required
	//ApiVersion: API Version of the resource type, optional when apiProfile is used
	//on the template
	ApiVersion ServersDatabasesAuditingSettingsSpecApiVersion `json:"apiVersion"`

	//Location: Location to deploy resource to
	Location *string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	//Name: Name of the resource
	Name string `json:"name"`

	// +kubebuilder:validation:Required
	//Properties: Properties of a database blob auditing policy.
	Properties                DatabaseBlobAuditingPolicyProperties `json:"properties"`
	ResourceGroupName         string                               `json:"resourceGroupName"`
	ResourceGroupNameRef      *v1alpha1.Reference                  `json:"resourceGroupNameRef,omitempty"`
	ResourceGroupNameSelector *v1alpha1.Selector                   `json:"resourceGroupNameSelector,omitempty"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`

	// +kubebuilder:validation:Required
	//Type: Resource type
	Type ServersDatabasesAuditingSettingsSpecType `json:"type"`
}

//Generated from: https://schema.management.azure.com/schemas/2015-05-01-preview/Microsoft.Sql.json#/definitions/DatabaseBlobAuditingPolicyProperties
type DatabaseBlobAuditingPolicyProperties struct {

	//AuditActionsAndGroups: Specifies the Actions-Groups and Actions to audit.
	//The recommended set of action groups to use is the following combination - this
	//will audit all the queries and stored procedures executed against the database,
	//as well as successful and failed logins:
	//BATCH_COMPLETED_GROUP,
	//SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
	//FAILED_DATABASE_AUTHENTICATION_GROUP.
	//This above combination is also the set that is configured by default when
	//enabling auditing from the Azure portal.
	//The supported action groups to audit are (note: choose only specific groups that
	//cover your auditing needs. Using unnecessary groups could lead to very large
	//quantities of audit records):
	//APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
	//BACKUP_RESTORE_GROUP
	//DATABASE_LOGOUT_GROUP
	//DATABASE_OBJECT_CHANGE_GROUP
	//DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
	//DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
	//DATABASE_OPERATION_GROUP
	//DATABASE_PERMISSION_CHANGE_GROUP
	//DATABASE_PRINCIPAL_CHANGE_GROUP
	//DATABASE_PRINCIPAL_IMPERSONATION_GROUP
	//DATABASE_ROLE_MEMBER_CHANGE_GROUP
	//FAILED_DATABASE_AUTHENTICATION_GROUP
	//SCHEMA_OBJECT_ACCESS_GROUP
	//SCHEMA_OBJECT_CHANGE_GROUP
	//SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
	//SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
	//SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
	//USER_CHANGE_PASSWORD_GROUP
	//BATCH_STARTED_GROUP
	//BATCH_COMPLETED_GROUP
	//These are groups that cover all sql statements and stored procedures executed
	//against the database, and should not be used in combination with other groups as
	//this will result in duplicate audit logs.
	//For more information, see [Database-Level Audit Action
	//Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
	//For Database auditing policy, specific Actions can also be specified (note that
	//Actions cannot be specified for Server auditing policy). The supported actions
	//to audit are:
	//SELECT
	//UPDATE
	//INSERT
	//DELETE
	//EXECUTE
	//RECEIVE
	//REFERENCES
	//The general form for defining an action to be audited is:
	//{action} ON {object} BY {principal}
	//Note that <object> in the above format can refer to an object like a table,
	//view, or stored procedure, or an entire database or schema. For the latter
	//cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used,
	//respectively.
	//For example:
	//SELECT on dbo.myTable by public
	//SELECT on DATABASE::myDatabase by public
	//SELECT on SCHEMA::mySchema by public
	//For more information, see [Database-Level Audit
	//Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
	AuditActionsAndGroups []string `json:"auditActionsAndGroups,omitempty"`

	//IsAzureMonitorTargetEnabled: Specifies whether audit events are sent to Azure
	//Monitor.
	//In order to send the events to Azure Monitor, specify 'state' as 'Enabled' and
	//'isAzureMonitorTargetEnabled' as true.
	//When using REST API to configure auditing, Diagnostic Settings with
	//'SQLSecurityAuditEvents' diagnostic logs category on the database should be also
	//created.
	//Note that for server level audit you should use the 'master' database as
	//{databaseName}.
	//Diagnostic Settings URI format:
	//PUT
	//https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
	//For more information, see [Diagnostic Settings REST
	//API](https://go.microsoft.com/fwlink/?linkid=2033207)
	//or [Diagnostic Settings
	//PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
	IsAzureMonitorTargetEnabled *bool `json:"isAzureMonitorTargetEnabled,omitempty"`

	//IsStorageSecondaryKeyInUse: Specifies whether storageAccountAccessKey value is
	//the storage's secondary key.
	IsStorageSecondaryKeyInUse *bool `json:"isStorageSecondaryKeyInUse,omitempty"`

	//QueueDelayMs: Specifies the amount of time in milliseconds that can elapse
	//before audit actions are forced to be processed.
	//The default minimum value is 1000 (1 second). The maximum is 2,147,483,647.
	QueueDelayMs *int `json:"queueDelayMs,omitempty"`

	//RetentionDays: Specifies the number of days to keep in the audit logs in the
	//storage account.
	RetentionDays *int `json:"retentionDays,omitempty"`

	// +kubebuilder:validation:Required
	//State: Specifies the state of the policy. If state is Enabled, storageEndpoint
	//or isAzureMonitorTargetEnabled are required.
	State DatabaseBlobAuditingPolicyPropertiesState `json:"state"`

	//StorageAccountAccessKey: Specifies the identifier key of the auditing storage
	//account.
	//If state is Enabled and storageEndpoint is specified, not specifying the
	//storageAccountAccessKey will use SQL server system-assigned managed identity to
	//access the storage.
	//Prerequisites for using managed identity authentication:
	//1. Assign SQL Server a system-assigned managed identity in Azure Active
	//Directory (AAD).
	//2. Grant SQL Server identity access to the storage account by adding 'Storage
	//Blob Data Contributor' RBAC role to the server identity.
	//For more information, see [Auditing to storage using Managed Identity
	//authentication](https://go.microsoft.com/fwlink/?linkid=2114355)
	StorageAccountAccessKey *string `json:"storageAccountAccessKey,omitempty"`

	//StorageAccountSubscriptionId: Specifies the blob storage subscription Id.
	StorageAccountSubscriptionId *string `json:"storageAccountSubscriptionId,omitempty"`

	//StorageEndpoint: Specifies the blob storage endpoint (e.g.
	//https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint
	//or isAzureMonitorTargetEnabled is required.
	StorageEndpoint *string `json:"storageEndpoint,omitempty"`
}

//Generated from:
type DatabaseBlobAuditingPolicyProperties_Status struct {

	//AuditActionsAndGroups: Specifies the Actions and Actions-Groups to audit.
	AuditActionsAndGroups []string `json:"auditActionsAndGroups,omitempty"`

	//IsStorageSecondaryKeyInUse: Specifies whether storageAccountAccessKey value is
	//the storageâ€™s secondary key.
	IsStorageSecondaryKeyInUse *bool `json:"isStorageSecondaryKeyInUse,omitempty"`

	//RetentionDays: Specifies the number of days to keep in the audit logs.
	RetentionDays *int `json:"retentionDays,omitempty"`

	// +kubebuilder:validation:Required
	//State: Specifies the state of the policy. If state is Enabled, storageEndpoint
	//and storageAccountAccessKey are required.
	State DatabaseBlobAuditingPolicyPropertiesStatusState `json:"state"`

	//StorageAccountAccessKey: Specifies the identifier key of the auditing storage
	//account. If state is Enabled, storageAccountAccessKey is required.
	StorageAccountAccessKey *string `json:"storageAccountAccessKey,omitempty"`

	//StorageAccountSubscriptionId: Specifies the blob storage subscription Id.
	StorageAccountSubscriptionId *string `json:"storageAccountSubscriptionId,omitempty"`

	//StorageEndpoint: Specifies the blob storage endpoint (e.g.
	//https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint
	//is required.
	StorageEndpoint *string `json:"storageEndpoint,omitempty"`
}

// +kubebuilder:validation:Enum={"2015-05-01-preview"}
type ServersDatabasesAuditingSettingsSpecApiVersion string

const ServersDatabasesAuditingSettingsSpecApiVersion20150501Preview = ServersDatabasesAuditingSettingsSpecApiVersion("2015-05-01-preview")

// +kubebuilder:validation:Enum={"Microsoft.Sql/servers/databases/auditingSettings"}
type ServersDatabasesAuditingSettingsSpecType string

const ServersDatabasesAuditingSettingsSpecTypeMicrosoftSqlServersDatabasesAuditingSettings = ServersDatabasesAuditingSettingsSpecType("Microsoft.Sql/servers/databases/auditingSettings")

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type DatabaseBlobAuditingPolicyPropertiesState string

const (
	DatabaseBlobAuditingPolicyPropertiesStateDisabled = DatabaseBlobAuditingPolicyPropertiesState("Disabled")
	DatabaseBlobAuditingPolicyPropertiesStateEnabled  = DatabaseBlobAuditingPolicyPropertiesState("Enabled")
)

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type DatabaseBlobAuditingPolicyPropertiesStatusState string

const (
	DatabaseBlobAuditingPolicyPropertiesStatusStateDisabled = DatabaseBlobAuditingPolicyPropertiesStatusState("Disabled")
	DatabaseBlobAuditingPolicyPropertiesStatusStateEnabled  = DatabaseBlobAuditingPolicyPropertiesStatusState("Enabled")
)

func init() {
	SchemeBuilder.Register(&ServersDatabasesAuditingSettings{}, &ServersDatabasesAuditingSettingsList{})
}
