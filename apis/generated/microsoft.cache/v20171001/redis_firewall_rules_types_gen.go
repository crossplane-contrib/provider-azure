// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// Code generated by k8s-infra-gen. DO NOT EDIT.
package v20171001

import (
	"github.com/crossplane/crossplane-runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type RedisFirewallRules struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RedisFirewallRules_Spec  `json:"spec,omitempty"`
	Status            RedisFirewallRule_Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
type RedisFirewallRulesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RedisFirewallRules `json:"items"`
}

type RedisFirewallRule_Status struct {
	v1alpha1.ResourceStatus `json:",inline"`
	AtProvider              RedisFirewallRulesObservation `json:"atProvider"`
}

type RedisFirewallRules_Spec struct {
	v1alpha1.ResourceSpec `json:",inline"`
	ForProvider           RedisFirewallRulesParameters `json:"forProvider"`
}

type RedisFirewallRulesObservation struct {

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Name: Resource name.
	Name *string `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	//Properties: redis cache firewall rule properties
	Properties RedisFirewallRuleProperties_Status `json:"properties"`

	//Type: Resource type.
	Type *string `json:"type,omitempty"`
}

type RedisFirewallRulesParameters struct {

	// +kubebuilder:validation:Required
	//ApiVersion: API Version of the resource type, optional when apiProfile is used
	//on the template
	ApiVersion RedisFirewallRulesSpecApiVersion `json:"apiVersion"`

	//Location: Location to deploy resource to
	Location *string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	//Name: Name of the resource
	Name string `json:"name"`

	// +kubebuilder:validation:Required
	//Properties: Specifies a range of IP addresses permitted to connect to the cache
	Properties                RedisFirewallRuleProperties `json:"properties"`
	RedisName                 string                      `json:"redisName"`
	RedisNameRef              *v1alpha1.Reference         `json:"redisNameRef,omitempty"`
	RedisNameSelector         *v1alpha1.Selector          `json:"redisNameSelector,omitempty"`
	ResourceGroupName         string                      `json:"resourceGroupName"`
	ResourceGroupNameRef      *v1alpha1.Reference         `json:"resourceGroupNameRef,omitempty"`
	ResourceGroupNameSelector *v1alpha1.Selector          `json:"resourceGroupNameSelector,omitempty"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`

	// +kubebuilder:validation:Required
	//Type: Resource type
	Type RedisFirewallRulesSpecType `json:"type"`
}

//Generated from: https://schema.management.azure.com/schemas/2017-10-01/Microsoft.Cache.json#/definitions/RedisFirewallRuleProperties
type RedisFirewallRuleProperties struct {

	// +kubebuilder:validation:Required
	//EndIP: highest IP address included in the range
	EndIP string `json:"endIP"`

	// +kubebuilder:validation:Required
	//StartIP: lowest IP address included in the range
	StartIP string `json:"startIP"`
}

//Generated from:
type RedisFirewallRuleProperties_Status struct {

	// +kubebuilder:validation:Required
	//EndIP: highest IP address included in the range
	EndIP string `json:"endIP"`

	// +kubebuilder:validation:Required
	//StartIP: lowest IP address included in the range
	StartIP string `json:"startIP"`
}

// +kubebuilder:validation:Enum={"2017-10-01"}
type RedisFirewallRulesSpecApiVersion string

const RedisFirewallRulesSpecApiVersion20171001 = RedisFirewallRulesSpecApiVersion("2017-10-01")

// +kubebuilder:validation:Enum={"Microsoft.Cache/Redis/firewallRules"}
type RedisFirewallRulesSpecType string

const RedisFirewallRulesSpecTypeMicrosoftCacheRedisFirewallRules = RedisFirewallRulesSpecType("Microsoft.Cache/Redis/firewallRules")

func init() {
	SchemeBuilder.Register(&RedisFirewallRules{}, &RedisFirewallRulesList{})
}
