
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.4
  creationTimestamp: null
  name: cosmosdbaccounts.database.azure.crossplane.io
spec:
  additionalPrinterColumns:
  - JSONPath: .status.conditions[?(@.type=='Ready')].status
    name: READY
    type: string
  - JSONPath: .status.conditions[?(@.type=='Synced')].status
    name: SYNCED
    type: string
  - JSONPath: .status.atProvider.state
    name: STATE
    type: string
  - JSONPath: .spec.forProvider.kind
    name: KIND
    type: string
  - JSONPath: .metadata.creationTimestamp
    name: AGE
    type: date
  group: database.azure.crossplane.io
  names:
    categories:
    - crossplane
    - managed
    - azure
    kind: CosmosDBAccount
    listKind: CosmosDBAccountList
    plural: cosmosdbaccounts
    singular: cosmosdbaccount
  scope: Cluster
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: A CosmosDBAccount is a managed resource that represents an Azure
        CosmosDB account with CosmosDB API.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: A CosmosDBAccountSpec defines the desired state of a CosmosDB
            Account.
          properties:
            claimRef:
              description: ClaimReference specifies the resource claim to which this
                managed resource will be bound. ClaimReference is set automatically
                during dynamic provisioning. Deprecated. See https://github.com/crossplane/crossplane/issues/1670
              properties:
                apiVersion:
                  description: API version of the referent.
                  type: string
                fieldPath:
                  description: 'If referring to a piece of an object instead of an
                    entire object, this string should contain a valid JSON/Go field
                    access statement, such as desiredState.manifest.containers[2].
                    For example, if the object reference is to a container within
                    a pod, this would take on a value like: "spec.containers{name}"
                    (where "name" refers to the name of the container that triggered
                    the event) or if no container name is specified "spec.containers[2]"
                    (container with index 2 in this pod). This syntax is chosen only
                    to have some well-defined way of referencing a part of an object.
                    TODO: this design is not final and this field is subject to change
                    in the future.'
                  type: string
                kind:
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                  type: string
                name:
                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                  type: string
                namespace:
                  description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                  type: string
                resourceVersion:
                  description: 'Specific resourceVersion to which this reference is
                    made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                  type: string
                uid:
                  description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                  type: string
              type: object
            classRef:
              description: ClassReference specifies the resource class that was used
                to dynamically provision this managed resource, if any. Deprecated.
                See https://github.com/crossplane/crossplane/issues/1670
              properties:
                apiVersion:
                  description: API version of the referent.
                  type: string
                fieldPath:
                  description: 'If referring to a piece of an object instead of an
                    entire object, this string should contain a valid JSON/Go field
                    access statement, such as desiredState.manifest.containers[2].
                    For example, if the object reference is to a container within
                    a pod, this would take on a value like: "spec.containers{name}"
                    (where "name" refers to the name of the container that triggered
                    the event) or if no container name is specified "spec.containers[2]"
                    (container with index 2 in this pod). This syntax is chosen only
                    to have some well-defined way of referencing a part of an object.
                    TODO: this design is not final and this field is subject to change
                    in the future.'
                  type: string
                kind:
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                  type: string
                name:
                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                  type: string
                namespace:
                  description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                  type: string
                resourceVersion:
                  description: 'Specific resourceVersion to which this reference is
                    made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                  type: string
                uid:
                  description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                  type: string
              type: object
            deletionPolicy:
              description: DeletionPolicy specifies what will happen to the underlying
                external when this managed resource is deleted - either "Delete" or
                "Orphan" the external resource. The "Delete" policy is the default
                when no policy is specified.
              enum:
              - Orphan
              - Delete
              type: string
            forProvider:
              description: CosmosDBAccountParameters define the desired state of an
                Azure CosmosDB account.
              properties:
                kind:
                  description: Kind - Indicates the type of database account.
                  type: string
                location:
                  description: Location - The location of the resource. This will
                    be one of the supported and registered Azure Geo Regions (e.g.
                    West US, East US, Southeast Asia, etc.).
                  type: string
                properties:
                  description: Properties - Account properties like databaseAccountOfferType,
                    ipRangeFilters, etc.
                  properties:
                    consistencyPolicy:
                      description: ConsistencyPolicy - The consistency policy for
                        the Cosmos DB account.
                      properties:
                        defaultConsistencyLevel:
                          description: 'DefaultConsistencyLevel - The default consistency
                            level and configuration settings of the Cosmos DB account.
                            Possible values include: ''Eventual'', ''Session'', ''BoundedStaleness'',
                            ''Strong'', ''ConsistentPrefix'''
                          type: string
                        maxIntervalInSeconds:
                          description: MaxIntervalInSeconds - When used with the Bounded
                            Staleness consistency level, this value represents the
                            time amount of staleness (in seconds) tolerated. Accepted
                            range for this value is 5 - 86400. Required when defaultConsistencyPolicy
                            is set to 'BoundedStaleness'.
                          format: int32
                          type: integer
                        maxStalenessPrefix:
                          description: MaxStalenessPrefix - When used with the Bounded
                            Staleness consistency level, this value represents the
                            number of stale requests tolerated. Accepted range for
                            this value is 1 â€“ 2,147,483,647. Required when defaultConsistencyPolicy
                            is set to 'BoundedStaleness'.
                          format: int64
                          type: integer
                      required:
                      - defaultConsistencyLevel
                      type: object
                    databaseAccountOfferType:
                      description: DatabaseAccountOfferType - The offer type for the
                        database
                      type: string
                    enableAutomaticFailover:
                      description: EnableAutomaticFailover - Enables automatic failover
                        of the write region in the rare event that the region is unavailable
                        due to an outage. Automatic failover will result in a new
                        write region for the account and is chosen based on the failover
                        priorities configured for the account.
                      type: boolean
                    enableCassandraConnector:
                      description: EnableCassandraConnector - Enables the cassandra
                        connector on the Cosmos DB C* account
                      type: boolean
                    enableMultipleWriteLocations:
                      description: EnableMultipleWriteLocations - Enables the account
                        to write in multiple locations
                      type: boolean
                    ipRangeFilter:
                      description: 'IPRangeFilter - Cosmos DB Firewall Support: This
                        value specifies the set of IP addresses or IP address ranges
                        in CIDR form to be included as the allowed list of client
                        IPs for a given database account. IP addresses/ranges must
                        be comma separated and must not contain any spaces.'
                      type: string
                    locations:
                      description: Locations - An array that contains the georeplication
                        locations enabled for the Cosmos DB account.
                      items:
                        description: CosmosDBAccountLocation a region in which the
                          Azure Cosmos DB database account is deployed.
                        properties:
                          failoverPriority:
                            description: FailoverPriority - The failover priority
                              of the region. A failover priority of 0 indicates a
                              write region. The maximum value for a failover priority
                              = (total number of regions - 1). Failover priority values
                              must be unique for each of the regions in which the
                              database account exists.
                            format: int32
                            type: integer
                          isZoneRedundant:
                            description: IsZoneRedundant - Flag to indicate whether
                              or not this region is an AvailabilityZone region
                            type: boolean
                          locationName:
                            description: LocationName - The name of the region.
                            type: string
                        required:
                        - failoverPriority
                        - isZoneRedundant
                        - locationName
                        type: object
                      type: array
                  required:
                  - databaseAccountOfferType
                  - locations
                  type: object
                resourceGroupName:
                  description: ResourceGroupName specifies the name of the resource
                    group that should contain this Account.
                  type: string
                resourceGroupNameRef:
                  description: ResourceGroupNameRef - A reference to a ResourceGroup
                    object to retrieve its name
                  properties:
                    name:
                      description: Name of the referenced object.
                      type: string
                  required:
                  - name
                  type: object
                resourceGroupNameSelector:
                  description: ResourceGroupNameSelector to select a reference to
                    a resource group.
                  properties:
                    matchControllerRef:
                      description: MatchControllerRef ensures an object with the same
                        controller reference as the selecting object is selected.
                      type: boolean
                    matchLabels:
                      additionalProperties:
                        type: string
                      description: MatchLabels ensures an object with matching labels
                        is selected.
                      type: object
                  type: object
                tags:
                  additionalProperties:
                    type: string
                  description: Tags - A list of key value pairs that describe the
                    resource. These tags can be used for viewing and grouping this
                    resource (across resource groups). A maximum of 15 tags can be
                    provided for a resource. Each tag must have a key with a length
                    no greater than 128 characters and a value with a length no greater
                    than 256 characters.
                  type: object
              required:
              - kind
              - location
              - properties
              type: object
            providerConfigRef:
              description: ProviderConfigReference specifies how the provider that
                will be used to create, observe, update, and delete this managed resource
                should be configured.
              properties:
                name:
                  description: Name of the referenced object.
                  type: string
              required:
              - name
              type: object
            providerRef:
              description: 'ProviderReference specifies the provider that will be
                used to create, observe, update, and delete this managed resource.
                Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`'
              properties:
                name:
                  description: Name of the referenced object.
                  type: string
              required:
              - name
              type: object
            reclaimPolicy:
              description: "ReclaimPolicy specifies what will happen to this managed
                resource when its resource claim is deleted, and what will happen
                to the underlying external resource when the managed resource is deleted.
                The \"Delete\" policy causes the managed resource to be deleted when
                its bound resource claim is deleted, and in turn causes the external
                resource to be deleted when its managed resource is deleted. The \"Retain\"
                policy causes the managed resource to be retained, in binding phase
                \"Released\", when its resource claim is deleted, and in turn causes
                the external resource to be retained when its managed resource is
                deleted. The \"Delete\" policy is used when no policy is specified.
                \n Deprecated. DeletionPolicy takes precedence when both are set.
                See https://github.com/crossplane/crossplane-runtime/issues/179."
              enum:
              - Retain
              - Delete
              type: string
            writeConnectionSecretToRef:
              description: WriteConnectionSecretToReference specifies the namespace
                and name of a Secret to which any connection details for this managed
                resource should be written. Connection details frequently include
                the endpoint, username, and password required to connect to the managed
                resource.
              properties:
                name:
                  description: Name of the secret.
                  type: string
                namespace:
                  description: Namespace of the secret.
                  type: string
              required:
              - name
              - namespace
              type: object
          required:
          - forProvider
          type: object
        status:
          description: An CosmosDBAccountStatus represents the observed state of an
            Account.
          properties:
            atProvider:
              description: CosmosDBAccountObservation shows current state of an Azure
                CosmosDB account.
              properties:
                id:
                  description: Identity - The identity of the resource.
                  type: string
                state:
                  description: State - current state of the account in Azure.
                  type: string
              required:
              - id
              - state
              type: object
            bindingPhase:
              description: Phase represents the binding phase of a managed resource
                or claim. Unbindable resources cannot be bound, typically because
                they are currently unavailable, or still being created. Unbound resource
                are available for binding, and Bound resources have successfully bound
                to another resource. Deprecated. See https://github.com/crossplane/crossplane/issues/1670
              enum:
              - Unbindable
              - Unbound
              - Bound
              - Released
              type: string
            conditions:
              description: Conditions of the resource.
              items:
                description: A Condition that may apply to a resource.
                properties:
                  lastTransitionTime:
                    description: LastTransitionTime is the last time this condition
                      transitioned from one status to another.
                    format: date-time
                    type: string
                  message:
                    description: A Message containing details about this condition's
                      last transition from one status to another, if any.
                    type: string
                  reason:
                    description: A Reason for this condition's last transition from
                      one status to another.
                    type: string
                  status:
                    description: Status of this condition; is it currently True, False,
                      or Unknown?
                    type: string
                  type:
                    description: Type of this condition. At most one of each condition
                      type may apply to a resource at any point in time.
                    type: string
                required:
                - lastTransitionTime
                - reason
                - status
                - type
                type: object
              type: array
          type: object
      required:
      - spec
      type: object
  version: v1alpha3
  versions:
  - name: v1alpha3
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
